name: Publish submissions
on:
  schedule:
    - cron: '*/30 * * * *'   # alle 30 Min
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: read
    steps:
      - uses: actions/checkout@v4

      - name: Load issues JSON
        id: issues
        uses: actions/github-script@v7
        with:
          script: |
            const issues = await github.paginate(github.rest.issues.listForRepo, {
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'submission'
            });
            return { issues };

      - name: Merge into data/listings.json
        run: |
          node -e "
          const fs=require('fs');
          const dataPath='data/listings.json';
          const current = fs.existsSync(dataPath) ? JSON.parse(fs.readFileSync(dataPath,'utf8')) : [];
          const incoming = JSON.parse(process.env.ISSUES).issues || [];
          const out = [...current];
          for(const is of incoming){
            const b = is.body || '';
            const f = Object.fromEntries([...b.matchAll(/^### (.+?)\\n([\\s\\S]*?)(?=\\n###|$)/gm)].map(m=>[m[1].trim().toLowerCase(), m[2].trim()]));
            const title = f['titel'] || is.title;
            const category = f['kategorie'] || '';
            const location = f['ort'] || '';
            const price = f['preis/preisrange'] || '';
            const description = f['beschreibung'] || '';
            const images = (f['bild-urls (eine pro zeile)']||'').split(/\\n+/).map(s=>s.trim()).filter(Boolean);
            const contact = f['kontakt (sichtbar)'] || '';
            const slug = (title||'item').toLowerCase().replace(/[^a-z0-9]+/g,'-').replace(/(^-|-$)/g,'');
            const page = `angebote/${slug}.html`;
            if(!out.find(x=>x.slug===slug)){
              out.push({slug,title,category,location,price,description,images,contact,page,date:new Date().toISOString()});
            }
          }
          fs.mkdirSync('angebote',{recursive:true});
          // einfache Detailseiten bauen
          for(const x of out){
            const img = x.images && x.images[0] ? x.images[0] : 'https://source.unsplash.com/1200x800/?architecture,interior';
            const html = `<!doctype html><meta charset='utf-8'>
            <link rel='stylesheet' href='https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css'>
            <title>${x.title}</title>
            <div class='container py-4'>
              <a href='../index.html#angebote'>&larr; Zur Übersicht</a>
              <h1 class='mt-3'>${x.title}</h1>
              <div class='text-muted mb-2'>${x.category||''} · ${x.location||''} · ${x.price||''}</div>
              <img class='img-fluid rounded mb-3' src='${img}' alt='${x.title}'>
              <p>${(x.description||'').replace(/\\n/g,'<br>')}</p>
              ${x.images && x.images.length>1 ? `<div class='row g-2'>${x.images.slice(1).map(u=>`<div class='col-md-4'><img class='img-fluid rounded' src='${u}'></div>`).join('')}</div>`:''}
              <div class='alert alert-light border mt-3'><strong>Kontakt:</strong> ${x.contact||'-'}</div>
              <p class='small text-muted mt-4'>Eingereicht von Nutzer*in. Inhalte/Urheberrechte liegen bei Einsender.</p>
            </div>`;
            fs.writeFileSync(x.page, html);
          }
          fs.writeFileSync(dataPath, JSON.stringify(out,null,2));
          console.log('Listings:', out.length);
          " 
        env:
          ISSUES: ${{ toJson(steps.issues.outputs) }}

      - name: Commit & push
        run: |
          git config user.name "auto-publisher"
          git config user.email "actions@users.noreply.github.com"
          git add data/listings.json angebote/
          git commit -m "Publish submissions" || echo "nichts zu committen"
          git push
