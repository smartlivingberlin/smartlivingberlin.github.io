name: Collect bids
on:
  schedule:
    - cron: '*/20 * * * *'   # alle 20 Min
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: read
    steps:
      - uses: actions/checkout@v4

      - name: Load bid issues
        id: bids
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            const issues = await github.paginate(github.rest.issues.listForRepo, {
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'bid'
            });
            return JSON.stringify(issues);

      - name: Build data/bids.json
        env:
          BIDS: ${{ steps.bids.outputs.result }}
        run: |
          node -e "
          const fs=require('fs');
          const issues = JSON.parse(process.env.BIDS || '[]');
          const out = {};
          // Hilfsfunktion zum Extrahieren aus Issue-Body (Issue-Forms speichern als Markdown)
          function parseForm(body){
            const blocks=[...body.matchAll(/^### (.+?)\\n([\\s\\S]*?)(?=\\n###|$)/gm)];
            const kv=Object.fromEntries(blocks.map(m=>[m[1].trim().toLowerCase(), m[2].trim()]));
            return kv;
          }
          for(const is of issues){
            const kv = parseForm(is.body||'');
            const slug = (kv['angebots-slug']||'').trim().toLowerCase();
            const bidder = (kv['dein name (kann gekÃ¼rzt angezeigt werden)']||'').trim();
            const amount = parseFloat((kv['gebot (eur, nur zahl)']||'0').replace(',', '.'));
            const note = (kv['hinweis (optional)']||'').trim();
            if(!slug || !bidder || !amount) continue;
            const entry = { bidder, amount, note, date: is.created_at };
            out[slug] = out[slug] || [];
            // Duplikate vermeiden: gleicher User + gleicher Betrag + Tag
            const key = (x)=> `${x.bidder}-${x.amount}-${x.date.split('T')[0]}`;
            const kNew = key(entry);
            if(!(out[slug].some(x=>key(x)===kNew))){
              out[slug].push(entry);
            }
          }
          // pro Listing nach Betrag absteigend sortieren
          for(const k of Object.keys(out)){
            out[k].sort((a,b)=>b.amount-a.amount);
          }
          fs.mkdirSync('data',{recursive:true});
          fs.writeFileSync('data/bids.json', JSON.stringify(out,null,2));
          console.log('Bids for listings:', Object.keys(out));
          "

      - name: Commit & push bids
        run: |
          git config user.name "auto-bids"
          git config user.email "actions@users.noreply.github.com"
          git add data/bids.json
          git commit -m "chore: update bids.json" || echo "nichts zu committen"
          git push
